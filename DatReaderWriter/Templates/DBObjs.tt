<#@ assembly name="netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51" #>
<#@ assembly name="$(ProjectDir)\..\DatReaderWriter.SourceGen\bin\netstandard2.0\System.CodeDom.dll" #>
<#@ assembly name="$(ProjectDir)\..\DatReaderWriter.SourceGen\bin\netstandard2.0\DatReaderWriter.SourceGen.dll" #>
<#@ template language="c#" hostspecific="true" inherits="DatReaderWriter.SourceGen.CSTemplateBase" #>
<#@ output extension=".cs" #>
<#@include file="MultipleOutputHelper.ttinclude"#>
<#
    var manager = Manager.Create(Host, GenerationEnvironment);
    
    SetupMessageParser(this.Host.ResolvePath("../dats.xml"));
    foreach (var kv in this.XMLDefParser.ACDBObjs) {
        if (kv.Value.Children.Count == 0) continue;
        if (kv.Key == "DBProperties" || kv.Key == "MasterProperty" || kv.Key == "LandBlock") {
            continue;
        }

        manager.StartNewFile($"../Generated/DBObjs/{kv.Key}.generated.cs");
        PrintLocalModificationWarning();
        WriteLine("using System;");
        WriteLine("using System.Numerics;");
        WriteLine("using System.IO;");
        WriteLine("using System.Linq;");
        WriteLine("using System.Collections.Generic;"); 
        WriteLine("using DatReaderWriter.Enums;");
        WriteLine("using DatReaderWriter.Types;");
        WriteLine("using DatReaderWriter.Lib;");
        WriteLine("using DatReaderWriter.Lib.Attributes;");
        WriteLine("using DatReaderWriter.Lib.IO;");
        WriteLine("");
        WriteLine("namespace DatReaderWriter.DBObjs {");
        using (new IndentHelper(this)) {
            var dataType = kv.Value;
        
            // summary docs and class definition
            WriteSummary(dataType.Text);
            var datType = (dataType.Parent as DatReaderWriter.SourceGen.Models.ACDat).Type;
            WriteLine($"[DBObjType(typeof({dataType.Name}), {datType}, DBObjType.{dataType.Name}, {dataType.DBObjHeaderFlags}, 0x{dataType.FirstId:X8}, 0x{dataType.LastId:X8}, 0x{dataType.MaskId:X8})]");
            WriteLine("public partial class " + dataType.Name + " : DBObj {");

            using (new IndentHelper(this)) {
                var usedPropertyNames = new List<string>();
                
                WriteLine("/// <inheritdoc />");
                WriteLine($"public override DBObjHeaderFlags HeaderFlags => {dataType.DBObjHeaderFlags};\n");
                
                WriteLine("/// <inheritdoc />");
                WriteLine($"public override DBObjType DBObjType => DBObjType.{dataType.Name};\n");

                // generate struct fields from messages.xml
                foreach (var baseModel in dataType.AllChildren) {
                    GenerateClassProperties(baseModel, ref usedPropertyNames);
                }

                // define method that can parse from binary
                WriteLine("/// <inheritdoc />");
                WriteLine("public override bool Unpack(DatBinReader reader) {"); 
                using (new IndentHelper(this)) {
                    WriteLine("base.Unpack(reader);");
                    foreach (var child in dataType.Children) {
                        GenerateReaderContents(child, 0);
                    }
                    WriteLine("return true;");
                }
                WriteLine("}\n");

                // define method that can parse to binary
                WriteLine("/// <inheritdoc />");
                WriteLine("public override bool Pack(DatBinWriter writer) {");
                using (new IndentHelper(this)) {
                    WriteLine("base.Pack(writer);");
                    foreach (var child in dataType.Children) {
                        GenerateWriterContents(child, 0);
                    }
                    WriteLine("return true;");
                }
                WriteLine("}\n");
            }
            WriteLine("}\n"); // close class definition
        }
        WriteLine("}");
        manager.EndBlock();
    }


    manager.Process(true);
#>
